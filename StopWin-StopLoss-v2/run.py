import json
import os
import secrets
import sys
from time import sleep
from types import NoneType
from binance.client import Client
from binance import BinanceSocketManager
from binance.enums import *
from colorama import *
from termcolor import *

with open(r'config.json') as f:
    config = json.load(f)
    
decimals = 3 #Amount of numbers after the , - Example: "0.003"
client = Client(config['public_api'], config['private_api'], {"verify": True, "timeout": 100}) #Request from Binance informations about your account

try:
    with open('buy_order.txt') as f:
        lines = f.readlines()

except FileNotFoundError:
    os.system("cls")
    print(Fore.YELLOW + "[3]" + Fore.WHITE + f" Apparently the file that I'm looking for doesn't exists.  ", end="\r")
    sleep(1.5)
    print(Fore.YELLOW + "[2]" + Fore.WHITE + f" Apparently the file that I'm looking for doesn't exists.. ", end="\r")
    sleep(1.5)
    print(Fore.YELLOW + "[1]" + Fore.WHITE + f" Apparently the file that I'm looking for doesn't exists...", end="\r")
    sleep(1.5)
    os.system("cls")
    print(Fore.YELLOW + "[+]" + Fore.WHITE + f" Message: This message still appearing probably because you're running this python manually, this part of the code only will work propely when It's runned by 'main.py', if the error keeps appearing, delete all txts files generated by this code and run 'main.py' again. Be careful, don't delete 'config.json' acidentally!")
    print(Fore.YELLOW + "\n[+]" + Fore.WHITE + f" Please close this console;")
    sleep(18000)

symbol = lines[1]
orderid = lines[0]
order = list(client.get_all_orders(symbol=str(symbol), orderId=int(orderid)))
sideOpenOrder = order[0]["side"] 
statusOpenOrder = order[0]["status"]
priceOpenOrder = order[0]["price"]
typeOpenOrder = order[0]["type"]
quantityOpenOrder = order[0]["origQty"]
f.close()

if sideOpenOrder == "BUY": #Just to make sure that the order is really BUY side
    while statusOpenOrder == "NEW":
        print(Fore.YELLOW + f"[+]" + Fore.WHITE + " Your stop win/gain settings:")
        print(Fore.YELLOW + f"[+]" + Fore.GREEN + f" {str(round((1 - config['stop_gain'])*100,2)).replace('-','')}%")
        print(Fore.YELLOW + f"[+]" + Fore.RED + f" {str(round((config['stop_loss']-1)*100,2)).replace('-','')}%\n")
        
        
        print(Fore.YELLOW + f"[+]" + Fore.WHITE + f" Coin/Amount: {float(quantityOpenOrder)} {symbol} | Status: {statusOpenOrder} | Order ID: {orderid} | Market Price: {round(float(priceOpenOrder),2)}$ | Side: {sideOpenOrder} | USD Amount: {round(float(quantityOpenOrder) * float(priceOpenOrder), 2)}$" + Fore.RESET)
        print(Fore.YELLOW + "\n[+]" + Fore.WHITE + " Waiting until the order get filled   ", end="\r")
        sleep(2)
        print(Fore.YELLOW + "[+]" + Fore.WHITE + " Waiting until the order get filled.  ", end="\r")
        sleep(2)
        print(Fore.YELLOW + "[+]" + Fore.WHITE + " Waiting until the order get filled.. ", end="\r")
        sleep(2)
        print(Fore.YELLOW + "[+]" + Fore.WHITE + " Waiting until the order get filled...", end="\r")
        sleep(10)
        order = list(client.get_all_orders(symbol=str(symbol), orderId=int(orderid)))
        statusOpenOrder = order[0]["status"]
        sleep(2)
        os.system("cls")
        if statusOpenOrder != "NEW":
            break
    
    #WHEN THE ORDER GET FILLED!
    if statusOpenOrder == "FILLED":
        print("ORDER FILLED!")
        filtered_symbol = symbol.replace("USDT","").replace("BUSD","").replace("USDC","")
        q1 = client.get_asset_balance(asset=filtered_symbol)
        q2 = float(list(q1.values())[1])
        quantity = round((q2 * float(0.98)), 2)
        stopLossprice = round(float(priceOpenOrder) * config['stop_loss'], decimals)
        stopLimitprice = round(stopLossprice * float(0.9), decimals)
        stopGainprice = round(float(priceOpenOrder) * config['stop_gain'], decimals)

        create = client.create_oco_order(
        symbol=symbol,
        side=SIDE_SELL,
        stopLimitTimeInForce=TIME_IN_FORCE_GTC,
        quantity=round(float(quantityOpenOrder),2),
        stopPrice=str(stopLossprice),
        stopLimitPrice=str(stopLossprice),
        price=str(stopGainprice))
        print(Fore.YELLOW + "[+]" + Fore.WHITE + " OCO ORDER CREATED, HERE COME SOME INFORMATIONS:")
        print(Fore.YELLOW + "[+]" + Fore.WHITE + f" YOU'RE SELLING THE COIN {filtered_symbol}, YOU BOUGHT AT {priceOpenOrder}$, NOW THE COIN IS GOING TO BE SELLED AT {str(stopGainprice)}$ - If it reachs the stop gain - OR SELLED AT {str(stopLossprice)} - If it break on StopLoss!")
        sleep(100000)
    else:
        exit()
else:
    print(Fore.YELLOW + "[+]" + Fore.WHITE + " Error SELL SIDE")
    
